@startuml
title Secure secrets delivery to a Kubernetes pod via vault agent injector

skinparam shadowing false
skinparam rectangleBorderColor #4A7AC7
skinparam rectangleBackgroundColor #EFF5FF
skinparam cloudBackgroundColor #D1E8FF // Light blue for vault
skinparam nodeBackgroundColor #FFF9E6   // Light yellow for pod components
skinparam queueBackgroundColor #E8F5E9  // Light green for K8s API

cloud "Central Secrets Vault\n(e.g., HashiCorp Vault,\nCloud Provider KMS/Secrets Manager)" as VAULT
queue "Kubernetes API Server" as K8S_API

frame "Kubernetes Node" {
  frame "Application Pod (e.g., Inference Pod)" {
    rectangle "Sidecar Injector/Agent\n(e.g., Vault Agent)" as SIDECAR_AGENT <<Container>>
    rectangle "Application Container\n(e.g., Model Serving)" as APP_CONTAINER <<Container>>
    rectangle "Memory-Backed Volume\n(e.g., Kubernetes emptyDir\nwith medium: Memory)\nPath: /mnt/secrets" as MEM_VOL <<Volume>>
  }
}

SIDECAR_AGENT -down--> K8S_API : (1) Uses K8s \nSA Token for Vault AuthN (JWT)
VAULT <- SIDECAR_AGENT : (2) Authenticates to Vault \n(e.g., using K8s SA Token / SPIFFE SVID)
VAULT --> SIDECAR_AGENT : (3) Issues short-lived \nVault token (if auth successful)
VAULT <- SIDECAR_AGENT : (4) Requests specific \nsecrets (using Vault token)
VAULT --> SIDECAR_AGENT : (5) Delivers requested \nsecrets (over mTLS)
SIDECAR_AGENT -> MEM_VOL : (6) Writes secrets to \nmemory-backed volume
MEM_VOL <-down- APP_CONTAINER : (7) Reads secrets from \nvolume at startup/runtime

note "Pod Creation Flow (Simplified):\n1. User/Orchestrator submits PodSpec to K8s API.\n2. Admission Controller (e.g., Vault Injector Webhook)\n   modifies PodSpec to include Sidecar Agent & Volume.\n3. Kubelet on Node creates Pod with both containers." as PodCreationNote
K8S_API .. PodCreationNote : (1A)
@enduml